volumes:
  model-cache:

networks:
  proxy:
    external: true
  immich-network:

services:
  immich-server:
    container_name: immich_server
    image: ${IMMICH_IMAGE_TAG}
    volumes:
      - ${UPLOAD_LOCATION}:/usr/src/app/upload
      - /etc/localtime:/etc/localtime:ro
    env_file:
      - stack.env
    depends_on:
      - redis
      - database
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.immich.entrypoints=https"
      - "traefik.http.routers.immich.rule=Host(`photos.${DOMAIN}`)"
      - "traefik.http.routers.immich.tls=true"
      - "traefik.http.routers.immich.tls.certresolver=cloudflare"
      - "traefik.http.routers.immich.tls.domains[0].main=${DOMAIN}"
      - "traefik.http.routers.immich.tls.domains[0].sans=*.${DOMAIN}"
      - "traefik.http.services.immich.loadbalancer.server.port=${IMMICH_PORT}"
      - "traefik.docker.network=proxy"
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - proxy
      - immich-network

  immich-machine-learning:
    container_name: immich_machine_learning
    image: ${IMMICH_ML_IMAGE_TAG}
    volumes:
      - model-cache:/cache
    env_file:
      - stack.env
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - immich-network

  redis:
    container_name: immich_redis
    image: ${IMMICH_REDIS_IMAGE_TAG}
    healthcheck:
      test: redis-cli ping || exit 1
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - immich-network

  database:
    container_name: immich_postgres
    image: ${IMMICH_DATABASE_IMAGE_TAG}
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_DB: ${DB_DATABASE_NAME}
      POSTGRES_INITDB_ARGS: '--data-checksums'
    volumes:
      - ${DB_DATA_LOCATION}:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready --dbname='${DB_DATABASE_NAME}' --username='${DB_USERNAME}' || exit 1; Chksum="$$(psql --dbname='${DB_DATABASE_NAME}' --username='${DB_USERNAME}' --tuples-only --no-align --command='SELECT COALESCE(SUM(checksum_failures), 0) FROM pg_stat_database')"; echo "checksum failure count is $$Chksum"; [ "$$Chksum" = '0' ] || exit 1
      interval: 5m
      start_interval: 30s
      start_period: 5m
    command: ["postgres", "-c", "shared_preload_libraries=vectors.so", "-c", 'search_path="$$user", public, vectors', "-c", "logging_collector=on", "-c", "max_wal_size=2GB", "-c", "shared_buffers=512MB", "-c", "wal_compression=on"]
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - immich-network
